#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import random
import time
import json
from datetime import datetime

class DeepSeekMini:
    def __init__(self):
        self.name = "DeepSeek Mini"
        self.version = "1.0"
        self.knowledge_base = self.load_knowledge_base()
        self.conversation_history = []
        
    def load_knowledge_base(self):
        """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏"""
        return {
            "greetings": {
                "patterns": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "hello", "hi", "—Ö–∞–π", "–∑–¥–∞—Ä–æ–≤", "–∫—É", "—Å–∞–ª–∞–º"],
                "responses": [
                    "–ü—Ä–∏–≤–µ—Ç! üòä –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!",
                    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                    "–•–∞–π! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? ‚ú®"
                ]
            },
            "about": {
                "patterns": ["–∫—Ç–æ —Ç—ã", "—á—Ç–æ —Ç—ã", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ç—ã –±–æ—Ç", "—Ç—ã –∏–∏"],
                "responses": [
                    "–Ø DeepSeek Mini - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞! –ú–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É.",
                    "–Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–Ω–∏–π –æ DeepSeek. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö!",
                    "–Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–æ–¥–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üòä",
                    "–Ø —Ç–≤–æ–π –ò–ò-–¥—Ä—É–≥! –ú–æ–≥—É –ø–æ—à—É—Ç–∏—Ç—å, –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å."
                ]
            },
            "programming": {
                "patterns": ["python", "javascript", "java", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ñ—É–Ω–∫—Ü–∏—è", "–ø–µ—Ä–µ–º–µ–Ω–Ω", "html", "css", "git", "github"],
                "responses": [
                    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è...",
                    "–í –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–Ω–æ–≤—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º! –ö–∞–∫–æ–π —è–∑—ã–∫ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∫—Ä—É—Ç–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–µ.",
                    "–û, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã! –≠—Ç–æ –º–æ—è –ª—é–±–∏–º–∞—è —Ç–µ–º–∞! üöÄ"
                ]
            },
            "jokes": {
                "patterns": ["—à—É—Ç–∫–∞", "–ø–æ—à—É—Ç–∏", "—Å–º–µ—à–Ω", "–ø—Ä–∏–∫–æ–ª", "—é–º–æ—Ä", "–∞–Ω–µ–∫–¥–æ—Ç"],
                "responses": [
                    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25! üòÑ",
                    "–ö–∞–∫–æ–π —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ —Ç–æ—Å—Ç? –ë–µ–∑ –æ—à–∏–±–æ–∫! ü•Ç",
                    "–ü–æ—á–µ–º—É Python –Ω–µ —Å–º–æ–≥ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ —Å–∫–∞—á–∫–∞—Ö? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–≤–æ–∏–º –∑–º–µ—è–º! üêç",
                    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª null –¥—Ä—É–≥–æ–º—É null? –ù–∏—á–µ–≥–æ, –æ–Ω–∏ –æ–±–∞ —É–ø–∞–ª–∏ —Å NPE! üí•",
                    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ –º–æ–∫—Ä—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ Python! üêç",
                    "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–∞–∑—ã–≤–∞—é—Ç –ª–∏—Ñ—Ç? –ú–µ—Ç–æ–¥ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è! üè¢"
                ]
            },
            "help": {
                "patterns": ["–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏", "–∫–æ–º–∞–Ω–¥—ã", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—Ñ—É–Ω–∫—Ü–∏–∏"],
                "responses": [
                    "–Ø —É–º–µ—é:\n‚Ä¢ –û–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã\n‚Ä¢ –®—É—Ç–∏—Ç—å –∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòÑ\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
                    "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ—Å–µ–¥—ã\n- –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n- –ü–æ–º–æ—â—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö\n- –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "–Ø –∑–¥–µ—Å—å —á—Ç–æ–±—ã:\nüéØ –ü–æ–º–æ—á—å —Å –∫–æ–¥–æ–º\nüòä –ü–æ–æ–±—â–∞—Ç—å—Å—è\nüé≠ –ü–æ—à—É—Ç–∏—Ç—å\nüí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!"
                ]
            },
            "time": {
                "patterns": ["–≤—Ä–µ–º—è", "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å", "–¥–∞—Ç–∞", "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"],
                "responses": [
                    f"–°–µ–π—á–∞—Å: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')} ‚è∞",
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}, –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                    f"–ù–∞ –º–æ–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —á–∞—Å–∞—Ö: {datetime.now().strftime('%H:%M:%S')} üïí"
                ]
            },
            "goodbye": {
                "patterns": ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω", "–ø—Ä–æ—â–∞–π", "—É–≤–∏–¥–∏–º—Å—è", "bye", "goodbye", "–≤—ã—Ö–æ–¥", "quit", "exit"],
                "responses": [
                    "–ü–æ–∫–∞! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã",
                    "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å –Ω–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
                    "–ü–æ–∫–∞-–ø–æ–∫–∞! –£–¥–∞—á–∏ –≤ —Ç–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!",
                    "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòä",
                    "–ü–æ–∫–∞! –ï—Å–ª–∏ —á—Ç–æ, —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç! ‚ú®"
                ]
            }
        }
    
    def find_category(self, message):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        for category, data in self.knowledge_base.items():
            for pattern in data["patterns"]:
                if pattern in message_lower:
                    return category
        return None
    
    def get_response(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        category = self.find_category(message)
        
        if category:
            responses = self.knowledge_base[category]["responses"]
            
            # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if category == "time":
                self.knowledge_base["time"]["responses"] = [
                    f"–°–µ–π—á–∞—Å: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')} ‚è∞",
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}, –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                    f"–ù–∞ –º–æ–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —á–∞—Å–∞—Ö: {datetime.now().strftime('%H:%M:%S')} üïí"
                ]
                responses = self.knowledge_base[category]["responses"]
            
            return random.choice(responses)
        else:
            # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? ü§î",
                "–•–º, —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º? üòä",
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, –Ω–æ —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–±–æ–ª—Ç–∞—Ç—å! üí¨",
                "–ú–æ–∂–µ—Ç, –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —à—É—Ç–∫—É? üòÑ",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ß—Ç–æ –µ—â–µ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç? ‚ú®"
            ]
            return random.choice(default_responses)
    
    def chat(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞"""
        print(f"ü§ñ {self.name} v{self.version}")
        print("=" * 40)
        print("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫.")
        print("–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é")
        print("–ù–∞–ø–∏—à–∏ '–ø–æ–∫–∞' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏")
        print("=" * 40)
        
        while True:
            try:
                user_input = input("\nüë§ –¢—ã: ").strip()
                
                if not user_input:
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append(f"–¢—ã: {user_input}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
                if any(word in user_input.lower() for word in ["–ø–æ–∫–∞", "–≤—ã—Ö–æ–¥", "quit", "exit"]):
                    response = self.get_response(user_input)
                    print(f"ü§ñ –Ø: {response}")
                    break
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                print("ü§ñ –Ø: ", end="", flush=True)
                thinking_time = random.uniform(0.5, 2.0)
                time.sleep(thinking_time)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                response = self.get_response(user_input)
                print(response)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append(f"–ë–æ—Ç: {response}")
                
            except KeyboardInterrupt:
                print(f"\n\nü§ñ –Ø: –ü–æ–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üëã")
                break
            except Exception as e:
                print(f"\nü§ñ –Ø: –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ")
                print(f"–û—à–∏–±–∫–∞: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = DeepSeekMini()
    bot.chat()

if __name__ == "__main__":
    main()
